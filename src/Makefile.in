# Makefile.in generated by automake 1.11.1 from Makefile.am.
# @configure_input@

# Copyright (C) 1994, 1995, 1996, 1997, 1998, 1999, 2000, 2001, 2002,
# 2003, 2004, 2005, 2006, 2007, 2008, 2009  Free Software Foundation,
# Inc.
# This Makefile.in is free software; the Free Software Foundation
# gives unlimited permission to copy and/or distribute it,
# with or without modifications, as long as this notice is preserved.

# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY, to the extent permitted by law; without
# even the implied warranty of MERCHANTABILITY or FITNESS FOR A
# PARTICULAR PURPOSE.

@SET_MAKE@

VPATH = @srcdir@
pkgdatadir = $(datadir)/@PACKAGE@
pkgincludedir = $(includedir)/@PACKAGE@
pkglibdir = $(libdir)/@PACKAGE@
pkglibexecdir = $(libexecdir)/@PACKAGE@
am__cd = CDPATH="$${ZSH_VERSION+.}$(PATH_SEPARATOR)" && cd
install_sh_DATA = $(install_sh) -c -m 644
install_sh_PROGRAM = $(install_sh) -c
install_sh_SCRIPT = $(install_sh) -c
INSTALL_HEADER = $(INSTALL_DATA)
transform = $(program_transform_name)
NORMAL_INSTALL = :
PRE_INSTALL = :
POST_INSTALL = :
NORMAL_UNINSTALL = :
PRE_UNINSTALL = :
POST_UNINSTALL = :
build_triplet = @build@
host_triplet = @host@
bin_PROGRAMS = psl2mrf$(EXEEXT) bowtie2mrf$(EXEEXT) \
	singleExport2mrf$(EXEEXT) mrfSubsetByTargetName$(EXEEXT) \
	mrfQuantifier$(EXEEXT) mrfAnnotationCoverage$(EXEEXT) \
	mrf2wig$(EXEEXT) mrf2gff$(EXEEXT) mrfSampler$(EXEEXT) \
	mrf2bgr$(EXEEXT) wigSegmenter$(EXEEXT) mrfMappingBias$(EXEEXT) \
	mrfSelectRegion$(EXEEXT) mrfSelectSpliced$(EXEEXT) \
	mrfSelectAnnotated$(EXEEXT) \
	createSpliceJunctionLibrary$(EXEEXT) gff2interval$(EXEEXT) \
	export2fastq$(EXEEXT) mergeTranscripts$(EXEEXT) \
	interval2gff$(EXEEXT) interval2sequences$(EXEEXT) \
	bed2interval$(EXEEXT) interval2bed$(EXEEXT) mrf2sam$(EXEEXT) \
	sam2mrf$(EXEEXT) mrfValidate$(EXEEXT) bgrQuantifier$(EXEEXT) \
	bgrSegmenter$(EXEEXT) mrfCountRegion$(EXEEXT) \
	mrfSubsetByGenes$(EXEEXT)
subdir = src
DIST_COMMON = $(srcdir)/Makefile.am $(srcdir)/Makefile.in
ACLOCAL_M4 = $(top_srcdir)/aclocal.m4
am__aclocal_m4_deps = $(top_srcdir)/m4/libtool.m4 \
	$(top_srcdir)/m4/ltoptions.m4 $(top_srcdir)/m4/ltsugar.m4 \
	$(top_srcdir)/m4/ltversion.m4 $(top_srcdir)/m4/lt~obsolete.m4 \
	$(top_srcdir)/configure.ac
am__configure_deps = $(am__aclocal_m4_deps) $(CONFIGURE_DEPENDENCIES) \
	$(ACLOCAL_M4)
mkinstalldirs = $(install_sh) -d
CONFIG_HEADER = $(top_builddir)/config.h
CONFIG_CLEAN_FILES =
CONFIG_CLEAN_VPATH_FILES =
am__installdirs = "$(DESTDIR)$(bindir)"
PROGRAMS = $(bin_PROGRAMS)
am_bed2interval_OBJECTS = bed2interval.$(OBJEXT)
bed2interval_OBJECTS = $(am_bed2interval_OBJECTS)
bed2interval_DEPENDENCIES =
am_bgrQuantifier_OBJECTS = bgrQuantifier.$(OBJEXT)
bgrQuantifier_OBJECTS = $(am_bgrQuantifier_OBJECTS)
bgrQuantifier_DEPENDENCIES =
am_bgrSegmenter_OBJECTS = bgrSegmenter.$(OBJEXT)
bgrSegmenter_OBJECTS = $(am_bgrSegmenter_OBJECTS)
bgrSegmenter_DEPENDENCIES =
am_bowtie2mrf_OBJECTS = bowtie2mrf.$(OBJEXT)
bowtie2mrf_OBJECTS = $(am_bowtie2mrf_OBJECTS)
bowtie2mrf_DEPENDENCIES =
am_createSpliceJunctionLibrary_OBJECTS =  \
	createSpliceJunctionLibrary.$(OBJEXT)
createSpliceJunctionLibrary_OBJECTS =  \
	$(am_createSpliceJunctionLibrary_OBJECTS)
createSpliceJunctionLibrary_DEPENDENCIES =
am_export2fastq_OBJECTS = export2fastq.$(OBJEXT)
export2fastq_OBJECTS = $(am_export2fastq_OBJECTS)
export2fastq_DEPENDENCIES =
am_gff2interval_OBJECTS = gff2interval.$(OBJEXT)
gff2interval_OBJECTS = $(am_gff2interval_OBJECTS)
gff2interval_DEPENDENCIES =
am_interval2bed_OBJECTS = interval2bed.$(OBJEXT)
interval2bed_OBJECTS = $(am_interval2bed_OBJECTS)
interval2bed_DEPENDENCIES =
am_interval2gff_OBJECTS = interval2gff.$(OBJEXT)
interval2gff_OBJECTS = $(am_interval2gff_OBJECTS)
interval2gff_DEPENDENCIES =
am_interval2sequences_OBJECTS = interval2sequences.$(OBJEXT)
interval2sequences_OBJECTS = $(am_interval2sequences_OBJECTS)
interval2sequences_DEPENDENCIES =
am_mergeTranscripts_OBJECTS = mergeTranscripts.$(OBJEXT)
mergeTranscripts_OBJECTS = $(am_mergeTranscripts_OBJECTS)
mergeTranscripts_DEPENDENCIES =
am_mrf2bgr_OBJECTS = mrf2bgr.$(OBJEXT)
mrf2bgr_OBJECTS = $(am_mrf2bgr_OBJECTS)
mrf2bgr_DEPENDENCIES =
am_mrf2gff_OBJECTS = mrf2gff.$(OBJEXT)
mrf2gff_OBJECTS = $(am_mrf2gff_OBJECTS)
mrf2gff_DEPENDENCIES =
am_mrf2sam_OBJECTS = mrf2sam.$(OBJEXT)
mrf2sam_OBJECTS = $(am_mrf2sam_OBJECTS)
mrf2sam_DEPENDENCIES =
am_mrf2wig_OBJECTS = mrf2wig.$(OBJEXT)
mrf2wig_OBJECTS = $(am_mrf2wig_OBJECTS)
mrf2wig_DEPENDENCIES =
am_mrfAnnotationCoverage_OBJECTS = mrfAnnotationCoverage.$(OBJEXT)
mrfAnnotationCoverage_OBJECTS = $(am_mrfAnnotationCoverage_OBJECTS)
mrfAnnotationCoverage_DEPENDENCIES =
am_mrfCountRegion_OBJECTS = mrfCountRegion.$(OBJEXT)
mrfCountRegion_OBJECTS = $(am_mrfCountRegion_OBJECTS)
mrfCountRegion_DEPENDENCIES =
am_mrfMappingBias_OBJECTS = mrfMappingBias.$(OBJEXT)
mrfMappingBias_OBJECTS = $(am_mrfMappingBias_OBJECTS)
mrfMappingBias_DEPENDENCIES =
am_mrfQuantifier_OBJECTS = mrfQuantifier.$(OBJEXT)
mrfQuantifier_OBJECTS = $(am_mrfQuantifier_OBJECTS)
mrfQuantifier_DEPENDENCIES =
am_mrfSampler_OBJECTS = mrfSampler.$(OBJEXT)
mrfSampler_OBJECTS = $(am_mrfSampler_OBJECTS)
mrfSampler_DEPENDENCIES =
am_mrfSelectAnnotated_OBJECTS = mrfSelectAnnotated.$(OBJEXT)
mrfSelectAnnotated_OBJECTS = $(am_mrfSelectAnnotated_OBJECTS)
mrfSelectAnnotated_DEPENDENCIES =
am_mrfSelectRegion_OBJECTS = mrfSelectRegion.$(OBJEXT)
mrfSelectRegion_OBJECTS = $(am_mrfSelectRegion_OBJECTS)
mrfSelectRegion_DEPENDENCIES =
am_mrfSelectSpliced_OBJECTS = mrfSelectSpliced.$(OBJEXT)
mrfSelectSpliced_OBJECTS = $(am_mrfSelectSpliced_OBJECTS)
mrfSelectSpliced_DEPENDENCIES =
am_mrfSubsetByGenes_OBJECTS = mrfSubsetByGenes.$(OBJEXT)
mrfSubsetByGenes_OBJECTS = $(am_mrfSubsetByGenes_OBJECTS)
mrfSubsetByGenes_DEPENDENCIES =
am_mrfSubsetByTargetName_OBJECTS = mrfSubsetByTargetName.$(OBJEXT)
mrfSubsetByTargetName_OBJECTS = $(am_mrfSubsetByTargetName_OBJECTS)
mrfSubsetByTargetName_DEPENDENCIES =
am_mrfValidate_OBJECTS = mrfValidate.$(OBJEXT)
mrfValidate_OBJECTS = $(am_mrfValidate_OBJECTS)
mrfValidate_DEPENDENCIES =
am_psl2mrf_OBJECTS = psl2mrf.$(OBJEXT)
psl2mrf_OBJECTS = $(am_psl2mrf_OBJECTS)
psl2mrf_DEPENDENCIES =
am_sam2mrf_OBJECTS = sam2mrf.$(OBJEXT)
sam2mrf_OBJECTS = $(am_sam2mrf_OBJECTS)
sam2mrf_DEPENDENCIES =
am_singleExport2mrf_OBJECTS = singleExport2mrf.$(OBJEXT)
singleExport2mrf_OBJECTS = $(am_singleExport2mrf_OBJECTS)
singleExport2mrf_DEPENDENCIES =
am_wigSegmenter_OBJECTS = wigSegmenter.$(OBJEXT)
wigSegmenter_OBJECTS = $(am_wigSegmenter_OBJECTS)
wigSegmenter_DEPENDENCIES =
DEFAULT_INCLUDES = -I.@am__isrc@ -I$(top_builddir)
depcomp = $(SHELL) $(top_srcdir)/depcomp
am__depfiles_maybe = depfiles
am__mv = mv -f
COMPILE = $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) \
	$(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS)
LTCOMPILE = $(LIBTOOL) --tag=CC $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) \
	--mode=compile $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) \
	$(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS)
CCLD = $(CC)
LINK = $(LIBTOOL) --tag=CC $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) \
	--mode=link $(CCLD) $(AM_CFLAGS) $(CFLAGS) $(AM_LDFLAGS) \
	$(LDFLAGS) -o $@
SOURCES = $(bed2interval_SOURCES) $(bgrQuantifier_SOURCES) \
	$(bgrSegmenter_SOURCES) $(bowtie2mrf_SOURCES) \
	$(createSpliceJunctionLibrary_SOURCES) $(export2fastq_SOURCES) \
	$(gff2interval_SOURCES) $(interval2bed_SOURCES) \
	$(interval2gff_SOURCES) $(interval2sequences_SOURCES) \
	$(mergeTranscripts_SOURCES) $(mrf2bgr_SOURCES) \
	$(mrf2gff_SOURCES) $(mrf2sam_SOURCES) $(mrf2wig_SOURCES) \
	$(mrfAnnotationCoverage_SOURCES) $(mrfCountRegion_SOURCES) \
	$(mrfMappingBias_SOURCES) $(mrfQuantifier_SOURCES) \
	$(mrfSampler_SOURCES) $(mrfSelectAnnotated_SOURCES) \
	$(mrfSelectRegion_SOURCES) $(mrfSelectSpliced_SOURCES) \
	$(mrfSubsetByGenes_SOURCES) $(mrfSubsetByTargetName_SOURCES) \
	$(mrfValidate_SOURCES) $(psl2mrf_SOURCES) $(sam2mrf_SOURCES) \
	$(singleExport2mrf_SOURCES) $(wigSegmenter_SOURCES)
DIST_SOURCES = $(bed2interval_SOURCES) $(bgrQuantifier_SOURCES) \
	$(bgrSegmenter_SOURCES) $(bowtie2mrf_SOURCES) \
	$(createSpliceJunctionLibrary_SOURCES) $(export2fastq_SOURCES) \
	$(gff2interval_SOURCES) $(interval2bed_SOURCES) \
	$(interval2gff_SOURCES) $(interval2sequences_SOURCES) \
	$(mergeTranscripts_SOURCES) $(mrf2bgr_SOURCES) \
	$(mrf2gff_SOURCES) $(mrf2sam_SOURCES) $(mrf2wig_SOURCES) \
	$(mrfAnnotationCoverage_SOURCES) $(mrfCountRegion_SOURCES) \
	$(mrfMappingBias_SOURCES) $(mrfQuantifier_SOURCES) \
	$(mrfSampler_SOURCES) $(mrfSelectAnnotated_SOURCES) \
	$(mrfSelectRegion_SOURCES) $(mrfSelectSpliced_SOURCES) \
	$(mrfSubsetByGenes_SOURCES) $(mrfSubsetByTargetName_SOURCES) \
	$(mrfValidate_SOURCES) $(psl2mrf_SOURCES) $(sam2mrf_SOURCES) \
	$(singleExport2mrf_SOURCES) $(wigSegmenter_SOURCES)
ETAGS = etags
CTAGS = ctags
DISTFILES = $(DIST_COMMON) $(DIST_SOURCES) $(TEXINFOS) $(EXTRA_DIST)
ACLOCAL = @ACLOCAL@
AMTAR = @AMTAR@
AR = @AR@
AUTOCONF = @AUTOCONF@
AUTOHEADER = @AUTOHEADER@
AUTOMAKE = @AUTOMAKE@
AWK = @AWK@
CC = @CC@
CCDEPMODE = @CCDEPMODE@
CFLAGS = @CFLAGS@
CPP = @CPP@
CPPFLAGS = @CPPFLAGS@
CYGPATH_W = @CYGPATH_W@
DEFS = @DEFS@
DEPDIR = @DEPDIR@
DSYMUTIL = @DSYMUTIL@
DUMPBIN = @DUMPBIN@
ECHO_C = @ECHO_C@
ECHO_N = @ECHO_N@
ECHO_T = @ECHO_T@
EGREP = @EGREP@
EXEEXT = @EXEEXT@
FGREP = @FGREP@
GREP = @GREP@
INSTALL = @INSTALL@
INSTALL_DATA = @INSTALL_DATA@
INSTALL_PROGRAM = @INSTALL_PROGRAM@
INSTALL_SCRIPT = @INSTALL_SCRIPT@
INSTALL_STRIP_PROGRAM = @INSTALL_STRIP_PROGRAM@
LD = @LD@
LDFLAGS = @LDFLAGS@
LIBOBJS = @LIBOBJS@
LIBS = @LIBS@
LIBTOOL = @LIBTOOL@
LIPO = @LIPO@
LN_S = @LN_S@
LTLIBOBJS = @LTLIBOBJS@
MAKEINFO = @MAKEINFO@
MKDIR_P = @MKDIR_P@
NM = @NM@
NMEDIT = @NMEDIT@
OBJDUMP = @OBJDUMP@
OBJEXT = @OBJEXT@
OTOOL = @OTOOL@
OTOOL64 = @OTOOL64@
PACKAGE = @PACKAGE@
PACKAGE_BUGREPORT = @PACKAGE_BUGREPORT@
PACKAGE_NAME = @PACKAGE_NAME@
PACKAGE_STRING = @PACKAGE_STRING@
PACKAGE_TARNAME = @PACKAGE_TARNAME@
PACKAGE_URL = @PACKAGE_URL@
PACKAGE_VERSION = @PACKAGE_VERSION@
PATH_SEPARATOR = @PATH_SEPARATOR@
RANLIB = @RANLIB@
SED = @SED@
SET_MAKE = @SET_MAKE@
SHELL = @SHELL@
STRIP = @STRIP@
VERSION = @VERSION@
abs_builddir = @abs_builddir@
abs_srcdir = @abs_srcdir@
abs_top_builddir = @abs_top_builddir@
abs_top_srcdir = @abs_top_srcdir@
ac_ct_CC = @ac_ct_CC@
ac_ct_DUMPBIN = @ac_ct_DUMPBIN@
am__include = @am__include@
am__leading_dot = @am__leading_dot@
am__quote = @am__quote@
am__tar = @am__tar@
am__untar = @am__untar@
bindir = @bindir@
build = @build@
build_alias = @build_alias@
build_cpu = @build_cpu@
build_os = @build_os@
build_vendor = @build_vendor@
builddir = @builddir@
datadir = @datadir@
datarootdir = @datarootdir@
docdir = @docdir@
dvidir = @dvidir@
exec_prefix = @exec_prefix@
host = @host@
host_alias = @host_alias@
host_cpu = @host_cpu@
host_os = @host_os@
host_vendor = @host_vendor@
htmldir = @htmldir@
includedir = @includedir@
infodir = @infodir@
install_sh = @install_sh@
libdir = @libdir@
libexecdir = @libexecdir@
localedir = @localedir@
localstatedir = @localstatedir@
lt_ECHO = @lt_ECHO@
mandir = @mandir@
mkdir_p = @mkdir_p@
oldincludedir = @oldincludedir@
pdfdir = @pdfdir@
prefix = @prefix@
program_transform_name = @program_transform_name@
psdir = @psdir@
sbindir = @sbindir@
sharedstatedir = @sharedstatedir@
srcdir = @srcdir@
sysconfdir = @sysconfdir@
target_alias = @target_alias@
top_build_prefix = @top_build_prefix@
top_builddir = @top_builddir@
top_srcdir = @top_srcdir@
psl2mrf_SOURCES = psl2mrf.c
psl2mrf_LDADD = -lmrf -lbios
bowtie2mrf_SOURCES = bowtie2mrf.c
bowtie2mrf_LDADD = -lmrf -lbios
singleExport2mrf_SOURCES = singleExport2mrf.c
singleExport2mrf_LDADD = -lmrf -lbios
mrfSubsetByTargetName_SOURCES = mrfSubsetByTargetName.c
mrfSubsetByTargetName_LDADD = -lmrf -lbios
mrfQuantifier_SOURCES = mrfQuantifier.c
mrfQuantifier_LDADD = -lmrf -lm -lbios
mrfAnnotationCoverage_SOURCES = mrfAnnotationCoverage.c
mrfAnnotationCoverage_LDADD = -lmrf -lm -lbios
mrf2wig_SOURCES = mrf2wig.c
mrf2wig_LDADD = -lmrf -lm -lbios
mrf2gff_SOURCES = mrf2gff.c
mrf2gff_LDADD = -lmrf -lbios
mrfSampler_SOURCES = mrfSampler.c
mrfSampler_LDADD = -lmrf -lbios
mrf2bgr_SOURCES = mrf2bgr.c
mrf2bgr_LDADD = -lmrf -lm -lbios
wigSegmenter_SOURCES = wigSegmenter.c
wigSegmenter_LDADD = -lmrf -lbios
mrfMappingBias_SOURCES = mrfMappingBias.c
mrfMappingBias_LDADD = -lmrf -lm -lbios
mrfSelectRegion_SOURCES = mrfSelectRegion.c
mrfSelectRegion_LDADD = -lmrf -lm -lbios
mrfSelectSpliced_SOURCES = mrfSelectSpliced.c
mrfSelectSpliced_LDADD = -lmrf -lbios
mrfSelectAnnotated_SOURCES = mrfSelectAnnotated.c
mrfSelectAnnotated_LDADD = -lmrf -lm -lbios
createSpliceJunctionLibrary_SOURCES = createSpliceJunctionLibrary.c
createSpliceJunctionLibrary_LDADD = -lmrf -lbios
gff2interval_SOURCES = gff2interval.c
gff2interval_LDADD = -lmrf -lbios
export2fastq_SOURCES = export2fastq.c
export2fastq_LDADD = -lmrf -lbios
mergeTranscripts_SOURCES = mergeTranscripts.c
mergeTranscripts_LDADD = -lmrf -lm -lbios
interval2gff_SOURCES = interval2gff.c
interval2gff_LDADD = -lmrf -lm -lbios
interval2sequences_SOURCES = interval2sequences.c
interval2sequences_LDADD = -lmrf -lm -lbios
bed2interval_SOURCES = bed2interval.c
bed2interval_LDADD = -lmrf -lm -lbios
interval2bed_SOURCES = interval2bed.c
interval2bed_LDADD = -lmrf -lm -lbios
mrf2sam_SOURCES = mrf2sam.c
mrf2sam_LDADD = -lmrf -lm -lbios
sam2mrf_SOURCES = sam2mrf.c
sam2mrf_LDADD = -lmrf -lbios
mrfValidate_SOURCES = mrfValidate.c
mrfValidate_LDADD = -lmrf -lbios
bgrQuantifier_SOURCES = bgrQuantifier.c
bgrQuantifier_LDADD = -lmrf -lbios
bgrSegmenter_SOURCES = bgrSegmenter.c
bgrSegmenter_LDADD = -lmrf -lbios
mrfCountRegion_SOURCES = mrfCountRegion.c
mrfCountRegion_LDADD = -lmrf -lm -lbios
mrfSubsetByGenes_SOURCES = mrfSubsetByGenes.c
mrfSubsetByGenes_LDADD = -lmrf -lm -lbios
all: all-am

.SUFFIXES:
.SUFFIXES: .c .lo .o .obj
$(srcdir)/Makefile.in:  $(srcdir)/Makefile.am  $(am__configure_deps)
	@for dep in $?; do \
	  case '$(am__configure_deps)' in \
	    *$$dep*) \
	      ( cd $(top_builddir) && $(MAKE) $(AM_MAKEFLAGS) am--refresh ) \
	        && { if test -f $@; then exit 0; else break; fi; }; \
	      exit 1;; \
	  esac; \
	done; \
	echo ' cd $(top_srcdir) && $(AUTOMAKE) --gnu src/Makefile'; \
	$(am__cd) $(top_srcdir) && \
	  $(AUTOMAKE) --gnu src/Makefile
.PRECIOUS: Makefile
Makefile: $(srcdir)/Makefile.in $(top_builddir)/config.status
	@case '$?' in \
	  *config.status*) \
	    cd $(top_builddir) && $(MAKE) $(AM_MAKEFLAGS) am--refresh;; \
	  *) \
	    echo ' cd $(top_builddir) && $(SHELL) ./config.status $(subdir)/$@ $(am__depfiles_maybe)'; \
	    cd $(top_builddir) && $(SHELL) ./config.status $(subdir)/$@ $(am__depfiles_maybe);; \
	esac;

$(top_builddir)/config.status: $(top_srcdir)/configure $(CONFIG_STATUS_DEPENDENCIES)
	cd $(top_builddir) && $(MAKE) $(AM_MAKEFLAGS) am--refresh

$(top_srcdir)/configure:  $(am__configure_deps)
	cd $(top_builddir) && $(MAKE) $(AM_MAKEFLAGS) am--refresh
$(ACLOCAL_M4):  $(am__aclocal_m4_deps)
	cd $(top_builddir) && $(MAKE) $(AM_MAKEFLAGS) am--refresh
$(am__aclocal_m4_deps):
install-binPROGRAMS: $(bin_PROGRAMS)
	@$(NORMAL_INSTALL)
	test -z "$(bindir)" || $(MKDIR_P) "$(DESTDIR)$(bindir)"
	@list='$(bin_PROGRAMS)'; test -n "$(bindir)" || list=; \
	for p in $$list; do echo "$$p $$p"; done | \
	sed 's/$(EXEEXT)$$//' | \
	while read p p1; do if test -f $$p || test -f $$p1; \
	  then echo "$$p"; echo "$$p"; else :; fi; \
	done | \
	sed -e 'p;s,.*/,,;n;h' -e 's|.*|.|' \
	    -e 'p;x;s,.*/,,;s/$(EXEEXT)$$//;$(transform);s/$$/$(EXEEXT)/' | \
	sed 'N;N;N;s,\n, ,g' | \
	$(AWK) 'BEGIN { files["."] = ""; dirs["."] = 1 } \
	  { d=$$3; if (dirs[d] != 1) { print "d", d; dirs[d] = 1 } \
	    if ($$2 == $$4) files[d] = files[d] " " $$1; \
	    else { print "f", $$3 "/" $$4, $$1; } } \
	  END { for (d in files) print "f", d, files[d] }' | \
	while read type dir files; do \
	    if test "$$dir" = .; then dir=; else dir=/$$dir; fi; \
	    test -z "$$files" || { \
	    echo " $(INSTALL_PROGRAM_ENV) $(LIBTOOL) $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=install $(INSTALL_PROGRAM) $$files '$(DESTDIR)$(bindir)$$dir'"; \
	    $(INSTALL_PROGRAM_ENV) $(LIBTOOL) $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=install $(INSTALL_PROGRAM) $$files "$(DESTDIR)$(bindir)$$dir" || exit $$?; \
	    } \
	; done

uninstall-binPROGRAMS:
	@$(NORMAL_UNINSTALL)
	@list='$(bin_PROGRAMS)'; test -n "$(bindir)" || list=; \
	files=`for p in $$list; do echo "$$p"; done | \
	  sed -e 'h;s,^.*/,,;s/$(EXEEXT)$$//;$(transform)' \
	      -e 's/$$/$(EXEEXT)/' `; \
	test -n "$$list" || exit 0; \
	echo " ( cd '$(DESTDIR)$(bindir)' && rm -f" $$files ")"; \
	cd "$(DESTDIR)$(bindir)" && rm -f $$files

clean-binPROGRAMS:
	@list='$(bin_PROGRAMS)'; test -n "$$list" || exit 0; \
	echo " rm -f" $$list; \
	rm -f $$list || exit $$?; \
	test -n "$(EXEEXT)" || exit 0; \
	list=`for p in $$list; do echo "$$p"; done | sed 's/$(EXEEXT)$$//'`; \
	echo " rm -f" $$list; \
	rm -f $$list
bed2interval$(EXEEXT): $(bed2interval_OBJECTS) $(bed2interval_DEPENDENCIES) 
	@rm -f bed2interval$(EXEEXT)
	$(LINK) $(bed2interval_OBJECTS) $(bed2interval_LDADD) $(LIBS)
bgrQuantifier$(EXEEXT): $(bgrQuantifier_OBJECTS) $(bgrQuantifier_DEPENDENCIES) 
	@rm -f bgrQuantifier$(EXEEXT)
	$(LINK) $(bgrQuantifier_OBJECTS) $(bgrQuantifier_LDADD) $(LIBS)
bgrSegmenter$(EXEEXT): $(bgrSegmenter_OBJECTS) $(bgrSegmenter_DEPENDENCIES) 
	@rm -f bgrSegmenter$(EXEEXT)
	$(LINK) $(bgrSegmenter_OBJECTS) $(bgrSegmenter_LDADD) $(LIBS)
bowtie2mrf$(EXEEXT): $(bowtie2mrf_OBJECTS) $(bowtie2mrf_DEPENDENCIES) 
	@rm -f bowtie2mrf$(EXEEXT)
	$(LINK) $(bowtie2mrf_OBJECTS) $(bowtie2mrf_LDADD) $(LIBS)
createSpliceJunctionLibrary$(EXEEXT): $(createSpliceJunctionLibrary_OBJECTS) $(createSpliceJunctionLibrary_DEPENDENCIES) 
	@rm -f createSpliceJunctionLibrary$(EXEEXT)
	$(LINK) $(createSpliceJunctionLibrary_OBJECTS) $(createSpliceJunctionLibrary_LDADD) $(LIBS)
export2fastq$(EXEEXT): $(export2fastq_OBJECTS) $(export2fastq_DEPENDENCIES) 
	@rm -f export2fastq$(EXEEXT)
	$(LINK) $(export2fastq_OBJECTS) $(export2fastq_LDADD) $(LIBS)
gff2interval$(EXEEXT): $(gff2interval_OBJECTS) $(gff2interval_DEPENDENCIES) 
	@rm -f gff2interval$(EXEEXT)
	$(LINK) $(gff2interval_OBJECTS) $(gff2interval_LDADD) $(LIBS)
interval2bed$(EXEEXT): $(interval2bed_OBJECTS) $(interval2bed_DEPENDENCIES) 
	@rm -f interval2bed$(EXEEXT)
	$(LINK) $(interval2bed_OBJECTS) $(interval2bed_LDADD) $(LIBS)
interval2gff$(EXEEXT): $(interval2gff_OBJECTS) $(interval2gff_DEPENDENCIES) 
	@rm -f interval2gff$(EXEEXT)
	$(LINK) $(interval2gff_OBJECTS) $(interval2gff_LDADD) $(LIBS)
interval2sequences$(EXEEXT): $(interval2sequences_OBJECTS) $(interval2sequences_DEPENDENCIES) 
	@rm -f interval2sequences$(EXEEXT)
	$(LINK) $(interval2sequences_OBJECTS) $(interval2sequences_LDADD) $(LIBS)
mergeTranscripts$(EXEEXT): $(mergeTranscripts_OBJECTS) $(mergeTranscripts_DEPENDENCIES) 
	@rm -f mergeTranscripts$(EXEEXT)
	$(LINK) $(mergeTranscripts_OBJECTS) $(mergeTranscripts_LDADD) $(LIBS)
mrf2bgr$(EXEEXT): $(mrf2bgr_OBJECTS) $(mrf2bgr_DEPENDENCIES) 
	@rm -f mrf2bgr$(EXEEXT)
	$(LINK) $(mrf2bgr_OBJECTS) $(mrf2bgr_LDADD) $(LIBS)
mrf2gff$(EXEEXT): $(mrf2gff_OBJECTS) $(mrf2gff_DEPENDENCIES) 
	@rm -f mrf2gff$(EXEEXT)
	$(LINK) $(mrf2gff_OBJECTS) $(mrf2gff_LDADD) $(LIBS)
mrf2sam$(EXEEXT): $(mrf2sam_OBJECTS) $(mrf2sam_DEPENDENCIES) 
	@rm -f mrf2sam$(EXEEXT)
	$(LINK) $(mrf2sam_OBJECTS) $(mrf2sam_LDADD) $(LIBS)
mrf2wig$(EXEEXT): $(mrf2wig_OBJECTS) $(mrf2wig_DEPENDENCIES) 
	@rm -f mrf2wig$(EXEEXT)
	$(LINK) $(mrf2wig_OBJECTS) $(mrf2wig_LDADD) $(LIBS)
mrfAnnotationCoverage$(EXEEXT): $(mrfAnnotationCoverage_OBJECTS) $(mrfAnnotationCoverage_DEPENDENCIES) 
	@rm -f mrfAnnotationCoverage$(EXEEXT)
	$(LINK) $(mrfAnnotationCoverage_OBJECTS) $(mrfAnnotationCoverage_LDADD) $(LIBS)
mrfCountRegion$(EXEEXT): $(mrfCountRegion_OBJECTS) $(mrfCountRegion_DEPENDENCIES) 
	@rm -f mrfCountRegion$(EXEEXT)
	$(LINK) $(mrfCountRegion_OBJECTS) $(mrfCountRegion_LDADD) $(LIBS)
mrfMappingBias$(EXEEXT): $(mrfMappingBias_OBJECTS) $(mrfMappingBias_DEPENDENCIES) 
	@rm -f mrfMappingBias$(EXEEXT)
	$(LINK) $(mrfMappingBias_OBJECTS) $(mrfMappingBias_LDADD) $(LIBS)
mrfQuantifier$(EXEEXT): $(mrfQuantifier_OBJECTS) $(mrfQuantifier_DEPENDENCIES) 
	@rm -f mrfQuantifier$(EXEEXT)
	$(LINK) $(mrfQuantifier_OBJECTS) $(mrfQuantifier_LDADD) $(LIBS)
mrfSampler$(EXEEXT): $(mrfSampler_OBJECTS) $(mrfSampler_DEPENDENCIES) 
	@rm -f mrfSampler$(EXEEXT)
	$(LINK) $(mrfSampler_OBJECTS) $(mrfSampler_LDADD) $(LIBS)
mrfSelectAnnotated$(EXEEXT): $(mrfSelectAnnotated_OBJECTS) $(mrfSelectAnnotated_DEPENDENCIES) 
	@rm -f mrfSelectAnnotated$(EXEEXT)
	$(LINK) $(mrfSelectAnnotated_OBJECTS) $(mrfSelectAnnotated_LDADD) $(LIBS)
mrfSelectRegion$(EXEEXT): $(mrfSelectRegion_OBJECTS) $(mrfSelectRegion_DEPENDENCIES) 
	@rm -f mrfSelectRegion$(EXEEXT)
	$(LINK) $(mrfSelectRegion_OBJECTS) $(mrfSelectRegion_LDADD) $(LIBS)
mrfSelectSpliced$(EXEEXT): $(mrfSelectSpliced_OBJECTS) $(mrfSelectSpliced_DEPENDENCIES) 
	@rm -f mrfSelectSpliced$(EXEEXT)
	$(LINK) $(mrfSelectSpliced_OBJECTS) $(mrfSelectSpliced_LDADD) $(LIBS)
mrfSubsetByGenes$(EXEEXT): $(mrfSubsetByGenes_OBJECTS) $(mrfSubsetByGenes_DEPENDENCIES) 
	@rm -f mrfSubsetByGenes$(EXEEXT)
	$(LINK) $(mrfSubsetByGenes_OBJECTS) $(mrfSubsetByGenes_LDADD) $(LIBS)
mrfSubsetByTargetName$(EXEEXT): $(mrfSubsetByTargetName_OBJECTS) $(mrfSubsetByTargetName_DEPENDENCIES) 
	@rm -f mrfSubsetByTargetName$(EXEEXT)
	$(LINK) $(mrfSubsetByTargetName_OBJECTS) $(mrfSubsetByTargetName_LDADD) $(LIBS)
mrfValidate$(EXEEXT): $(mrfValidate_OBJECTS) $(mrfValidate_DEPENDENCIES) 
	@rm -f mrfValidate$(EXEEXT)
	$(LINK) $(mrfValidate_OBJECTS) $(mrfValidate_LDADD) $(LIBS)
psl2mrf$(EXEEXT): $(psl2mrf_OBJECTS) $(psl2mrf_DEPENDENCIES) 
	@rm -f psl2mrf$(EXEEXT)
	$(LINK) $(psl2mrf_OBJECTS) $(psl2mrf_LDADD) $(LIBS)
sam2mrf$(EXEEXT): $(sam2mrf_OBJECTS) $(sam2mrf_DEPENDENCIES) 
	@rm -f sam2mrf$(EXEEXT)
	$(LINK) $(sam2mrf_OBJECTS) $(sam2mrf_LDADD) $(LIBS)
singleExport2mrf$(EXEEXT): $(singleExport2mrf_OBJECTS) $(singleExport2mrf_DEPENDENCIES) 
	@rm -f singleExport2mrf$(EXEEXT)
	$(LINK) $(singleExport2mrf_OBJECTS) $(singleExport2mrf_LDADD) $(LIBS)
wigSegmenter$(EXEEXT): $(wigSegmenter_OBJECTS) $(wigSegmenter_DEPENDENCIES) 
	@rm -f wigSegmenter$(EXEEXT)
	$(LINK) $(wigSegmenter_OBJECTS) $(wigSegmenter_LDADD) $(LIBS)

mostlyclean-compile:
	-rm -f *.$(OBJEXT)

distclean-compile:
	-rm -f *.tab.c

@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/bed2interval.Po@am__quote@
@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/bgrQuantifier.Po@am__quote@
@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/bgrSegmenter.Po@am__quote@
@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/bowtie2mrf.Po@am__quote@
@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/createSpliceJunctionLibrary.Po@am__quote@
@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/export2fastq.Po@am__quote@
@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/gff2interval.Po@am__quote@
@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/interval2bed.Po@am__quote@
@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/interval2gff.Po@am__quote@
@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/interval2sequences.Po@am__quote@
@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/mergeTranscripts.Po@am__quote@
@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/mrf2bgr.Po@am__quote@
@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/mrf2gff.Po@am__quote@
@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/mrf2sam.Po@am__quote@
@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/mrf2wig.Po@am__quote@
@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/mrfAnnotationCoverage.Po@am__quote@
@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/mrfCountRegion.Po@am__quote@
@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/mrfMappingBias.Po@am__quote@
@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/mrfQuantifier.Po@am__quote@
@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/mrfSampler.Po@am__quote@
@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/mrfSelectAnnotated.Po@am__quote@
@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/mrfSelectRegion.Po@am__quote@
@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/mrfSelectSpliced.Po@am__quote@
@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/mrfSubsetByGenes.Po@am__quote@
@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/mrfSubsetByTargetName.Po@am__quote@
@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/mrfValidate.Po@am__quote@
@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/psl2mrf.Po@am__quote@
@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/sam2mrf.Po@am__quote@
@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/singleExport2mrf.Po@am__quote@
@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/wigSegmenter.Po@am__quote@

.c.o:
@am__fastdepCC_TRUE@	$(COMPILE) -MT $@ -MD -MP -MF $(DEPDIR)/$*.Tpo -c -o $@ $<
@am__fastdepCC_TRUE@	$(am__mv) $(DEPDIR)/$*.Tpo $(DEPDIR)/$*.Po
@AMDEP_TRUE@@am__fastdepCC_FALSE@	source='$<' object='$@' libtool=no @AMDEPBACKSLASH@
@AMDEP_TRUE@@am__fastdepCC_FALSE@	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) @AMDEPBACKSLASH@
@am__fastdepCC_FALSE@	$(COMPILE) -c $<

.c.obj:
@am__fastdepCC_TRUE@	$(COMPILE) -MT $@ -MD -MP -MF $(DEPDIR)/$*.Tpo -c -o $@ `$(CYGPATH_W) '$<'`
@am__fastdepCC_TRUE@	$(am__mv) $(DEPDIR)/$*.Tpo $(DEPDIR)/$*.Po
@AMDEP_TRUE@@am__fastdepCC_FALSE@	source='$<' object='$@' libtool=no @AMDEPBACKSLASH@
@AMDEP_TRUE@@am__fastdepCC_FALSE@	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) @AMDEPBACKSLASH@
@am__fastdepCC_FALSE@	$(COMPILE) -c `$(CYGPATH_W) '$<'`

.c.lo:
@am__fastdepCC_TRUE@	$(LTCOMPILE) -MT $@ -MD -MP -MF $(DEPDIR)/$*.Tpo -c -o $@ $<
@am__fastdepCC_TRUE@	$(am__mv) $(DEPDIR)/$*.Tpo $(DEPDIR)/$*.Plo
@AMDEP_TRUE@@am__fastdepCC_FALSE@	source='$<' object='$@' libtool=yes @AMDEPBACKSLASH@
@AMDEP_TRUE@@am__fastdepCC_FALSE@	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) @AMDEPBACKSLASH@
@am__fastdepCC_FALSE@	$(LTCOMPILE) -c -o $@ $<

mostlyclean-libtool:
	-rm -f *.lo

clean-libtool:
	-rm -rf .libs _libs

ID: $(HEADERS) $(SOURCES) $(LISP) $(TAGS_FILES)
	list='$(SOURCES) $(HEADERS) $(LISP) $(TAGS_FILES)'; \
	unique=`for i in $$list; do \
	    if test -f "$$i"; then echo $$i; else echo $(srcdir)/$$i; fi; \
	  done | \
	  $(AWK) '{ files[$$0] = 1; nonempty = 1; } \
	      END { if (nonempty) { for (i in files) print i; }; }'`; \
	mkid -fID $$unique
tags: TAGS

TAGS:  $(HEADERS) $(SOURCES)  $(TAGS_DEPENDENCIES) \
		$(TAGS_FILES) $(LISP)
	set x; \
	here=`pwd`; \
	list='$(SOURCES) $(HEADERS)  $(LISP) $(TAGS_FILES)'; \
	unique=`for i in $$list; do \
	    if test -f "$$i"; then echo $$i; else echo $(srcdir)/$$i; fi; \
	  done | \
	  $(AWK) '{ files[$$0] = 1; nonempty = 1; } \
	      END { if (nonempty) { for (i in files) print i; }; }'`; \
	shift; \
	if test -z "$(ETAGS_ARGS)$$*$$unique"; then :; else \
	  test -n "$$unique" || unique=$$empty_fix; \
	  if test $$# -gt 0; then \
	    $(ETAGS) $(ETAGSFLAGS) $(AM_ETAGSFLAGS) $(ETAGS_ARGS) \
	      "$$@" $$unique; \
	  else \
	    $(ETAGS) $(ETAGSFLAGS) $(AM_ETAGSFLAGS) $(ETAGS_ARGS) \
	      $$unique; \
	  fi; \
	fi
ctags: CTAGS
CTAGS:  $(HEADERS) $(SOURCES)  $(TAGS_DEPENDENCIES) \
		$(TAGS_FILES) $(LISP)
	list='$(SOURCES) $(HEADERS)  $(LISP) $(TAGS_FILES)'; \
	unique=`for i in $$list; do \
	    if test -f "$$i"; then echo $$i; else echo $(srcdir)/$$i; fi; \
	  done | \
	  $(AWK) '{ files[$$0] = 1; nonempty = 1; } \
	      END { if (nonempty) { for (i in files) print i; }; }'`; \
	test -z "$(CTAGS_ARGS)$$unique" \
	  || $(CTAGS) $(CTAGSFLAGS) $(AM_CTAGSFLAGS) $(CTAGS_ARGS) \
	     $$unique

GTAGS:
	here=`$(am__cd) $(top_builddir) && pwd` \
	  && $(am__cd) $(top_srcdir) \
	  && gtags -i $(GTAGS_ARGS) "$$here"

distclean-tags:
	-rm -f TAGS ID GTAGS GRTAGS GSYMS GPATH tags

distdir: $(DISTFILES)
	@srcdirstrip=`echo "$(srcdir)" | sed 's/[].[^$$\\*]/\\\\&/g'`; \
	topsrcdirstrip=`echo "$(top_srcdir)" | sed 's/[].[^$$\\*]/\\\\&/g'`; \
	list='$(DISTFILES)'; \
	  dist_files=`for file in $$list; do echo $$file; done | \
	  sed -e "s|^$$srcdirstrip/||;t" \
	      -e "s|^$$topsrcdirstrip/|$(top_builddir)/|;t"`; \
	case $$dist_files in \
	  */*) $(MKDIR_P) `echo "$$dist_files" | \
			   sed '/\//!d;s|^|$(distdir)/|;s,/[^/]*$$,,' | \
			   sort -u` ;; \
	esac; \
	for file in $$dist_files; do \
	  if test -f $$file || test -d $$file; then d=.; else d=$(srcdir); fi; \
	  if test -d $$d/$$file; then \
	    dir=`echo "/$$file" | sed -e 's,/[^/]*$$,,'`; \
	    if test -d "$(distdir)/$$file"; then \
	      find "$(distdir)/$$file" -type d ! -perm -700 -exec chmod u+rwx {} \;; \
	    fi; \
	    if test -d $(srcdir)/$$file && test $$d != $(srcdir); then \
	      cp -fpR $(srcdir)/$$file "$(distdir)$$dir" || exit 1; \
	      find "$(distdir)/$$file" -type d ! -perm -700 -exec chmod u+rwx {} \;; \
	    fi; \
	    cp -fpR $$d/$$file "$(distdir)$$dir" || exit 1; \
	  else \
	    test -f "$(distdir)/$$file" \
	    || cp -p $$d/$$file "$(distdir)/$$file" \
	    || exit 1; \
	  fi; \
	done
check-am: all-am
check: check-am
all-am: Makefile $(PROGRAMS)
installdirs:
	for dir in "$(DESTDIR)$(bindir)"; do \
	  test -z "$$dir" || $(MKDIR_P) "$$dir"; \
	done
install: install-am
install-exec: install-exec-am
install-data: install-data-am
uninstall: uninstall-am

install-am: all-am
	@$(MAKE) $(AM_MAKEFLAGS) install-exec-am install-data-am

installcheck: installcheck-am
install-strip:
	$(MAKE) $(AM_MAKEFLAGS) INSTALL_PROGRAM="$(INSTALL_STRIP_PROGRAM)" \
	  install_sh_PROGRAM="$(INSTALL_STRIP_PROGRAM)" INSTALL_STRIP_FLAG=-s \
	  `test -z '$(STRIP)' || \
	    echo "INSTALL_PROGRAM_ENV=STRIPPROG='$(STRIP)'"` install
mostlyclean-generic:

clean-generic:

distclean-generic:
	-test -z "$(CONFIG_CLEAN_FILES)" || rm -f $(CONFIG_CLEAN_FILES)
	-test . = "$(srcdir)" || test -z "$(CONFIG_CLEAN_VPATH_FILES)" || rm -f $(CONFIG_CLEAN_VPATH_FILES)

maintainer-clean-generic:
	@echo "This command is intended for maintainers to use"
	@echo "it deletes files that may require special tools to rebuild."
clean: clean-am

clean-am: clean-binPROGRAMS clean-generic clean-libtool mostlyclean-am

distclean: distclean-am
	-rm -rf ./$(DEPDIR)
	-rm -f Makefile
distclean-am: clean-am distclean-compile distclean-generic \
	distclean-tags

dvi: dvi-am

dvi-am:

html: html-am

html-am:

info: info-am

info-am:

install-data-am:

install-dvi: install-dvi-am

install-dvi-am:

install-exec-am: install-binPROGRAMS

install-html: install-html-am

install-html-am:

install-info: install-info-am

install-info-am:

install-man:

install-pdf: install-pdf-am

install-pdf-am:

install-ps: install-ps-am

install-ps-am:

installcheck-am:

maintainer-clean: maintainer-clean-am
	-rm -rf ./$(DEPDIR)
	-rm -f Makefile
maintainer-clean-am: distclean-am maintainer-clean-generic

mostlyclean: mostlyclean-am

mostlyclean-am: mostlyclean-compile mostlyclean-generic \
	mostlyclean-libtool

pdf: pdf-am

pdf-am:

ps: ps-am

ps-am:

uninstall-am: uninstall-binPROGRAMS

.MAKE: install-am install-strip

.PHONY: CTAGS GTAGS all all-am check check-am clean clean-binPROGRAMS \
	clean-generic clean-libtool ctags distclean distclean-compile \
	distclean-generic distclean-libtool distclean-tags distdir dvi \
	dvi-am html html-am info info-am install install-am \
	install-binPROGRAMS install-data install-data-am install-dvi \
	install-dvi-am install-exec install-exec-am install-html \
	install-html-am install-info install-info-am install-man \
	install-pdf install-pdf-am install-ps install-ps-am \
	install-strip installcheck installcheck-am installdirs \
	maintainer-clean maintainer-clean-generic mostlyclean \
	mostlyclean-compile mostlyclean-generic mostlyclean-libtool \
	pdf pdf-am ps ps-am tags uninstall uninstall-am \
	uninstall-binPROGRAMS


# Tell versions [3.59,3.63) of GNU make to not export all variables.
# Otherwise a system limit (for SysV at least) may be exceeded.
.NOEXPORT:
